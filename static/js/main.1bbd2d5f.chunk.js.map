{"version":3,"sources":["components/Layout/logo.svg","serviceWorker.js","services/index.js","components/RedirectOffServer/index.js","components/Authorization/index.js","components/OAuth/index.js","actions/index.js","components/Layout/index.js","components/UserCard/index.js","components/Home/index.js","routes.js","reducers/oauth.js","reducers/loading.js","reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","dataService","store","next","action","state","getState","getApi","route","name","axios","get","headers","Content-Type","then","res","type","concat","data","err","console","log","getApiGenerator","oauth","access_token","RedirectOffServer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","target","componentDidMount","bind","assertThisInitialized","componentWillReceiveProps","replace","nextProps","react_default","a","createElement","Component","connect","objectSpread","login","_ref","objectWithoutProperties","RedirectOffServer_RedirectOffServer","assign","queryString","require","Success","dispatch","storeAccessToken","getUser","parse","search","Redirect","to","Layout","children","className","src","logo","alt","avatar_url","class","Home","components_UserCard","routes","components_Layout","Route","exact","path","component","components_Authorization","NavLink","arguments","length","undefined","loading","rootReducer","combineReducers","createStore","applyMiddleware","render","es","HashRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bbd2d5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\n\nconst getApiGenerator = next => (route, name) =>\n    axios.get(route, {\n        headers: {\n            'Content-Type': 'application/json',\n          }})\n        .then(res => {\n            next({\n                type: `${name}_RECEIVED`,\n                data: res.data\n            })\n        },\n        (err) => {\n            console.log(err);\n            return next({\n                type: `${name}_ERROR`,\n                err\n            })\n        })\n\nconst dataService = store => next => action => {\n    next(action)\n    var url;\n    var state = store.getState();\n    const getApi = getApiGenerator(next)\n    switch (action.type) {\n        case 'GET_USER':\n            // Gets basic user info from Github api using the users access token\n            url = `https://api.github.com/user?access_token=${state.oauth.access_token}`\n            getApi(url, action.type)\n            break\n        default:\n            break\n    }\n}\n\nexport default dataService","import React, { Component } from \"react\";\n\n/**\n * \n * Redirects to a location off the \"server\" (github pages in this case)\n * \n * @param {text} target url to redirect to\n */\nexport default class RedirectOffServer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.target = props.target;\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n  }\n\n  componentDidMount() {\n    window.location.replace(this.target);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(!this.target || this.props.target !== nextProps.target) {\n      window.location.replace(nextProps.target);\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <span>Redirecting to {this.target}</span>\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport { connect } from 'react-redux';\nimport RedirectOffServer from '../RedirectOffServer';\n\n// URL to my Elastic Beanstalk AWS server. Code can be found on my GitHub\nconst SERVER_URL = \"https://api.yohlo.me/\"\n\n/**\n * \n * Authorization will evaluate if a user has access to the component and\n * return the component or a restricted page.\n * \n * @param {any} Component \n * @param {array} allowed list of usernames allowed on page/component (optional)\n * @param {object} access_token access_token\n * @param {object} login login\n */\nconst Authorization = ({ Component, access_token, login, ...props}) => {\n\n    if (!access_token) {\n        return <RedirectOffServer {...props}\n            target={`${SERVER_URL}/auth/login?app=github-oauth`}\n        />\n    } else {\n        return <Component {...props} />;\n    }\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        ...props,\n        access_token: state.oauth.access_token,\n        login: state.oauth.login\n    };\n}\n\nexport default connect(mapStateToProps)(Authorization);","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { storeAccessToken, getUser } from '../../actions';\nimport { Redirect } from 'react-router'\nimport { NavLink } from 'react-router-dom';\nconst queryString = require('query-string');\n\n/**\n * \n * Login is a component that tells the user to login.\n * \n */\nexport const Login = (props) => {\n    return <div>\n        <p>\n            Login via GitHub by clicking the link below.\n        </p>\n        <NavLink className=\"App-link\"\n            to=\"/Login\"\n        >\n            Login\n        </NavLink>\n    </div>;\n}\n\n/**\n * \n * Stores the access token and gets the user!\n * \n * @param {any} storeAccessToken function that stores the access token in the store\n * @param {any} getUser function that gets user from services\n */\nconst SuccessComponent = ({ storeAccessToken, getUser, ...props }) => {\n    const access_token = queryString.parse(props.location.search).access_token;\n    storeAccessToken(access_token);\n    getUser();\n    return <Redirect to=\"/\" />\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        ...props,\n        storeAccessToken: (access_token) => dispatch(storeAccessToken(access_token)),\n        getUser: () => dispatch(getUser())\n    };\n}\n\nexport const Success = connect(null, mapDispatchToProps)(SuccessComponent);\n\n// Uh-oh!\nexport const Error = (props) => {\n    return <p>Erorr!</p>;\n}","// OAuth\nexport const storeAccessToken = (access_token) => ({\n    type: 'STORE_ACCESS_TOKEN',\n    access_token\n});\n\nexport const getUser = () => ({\n    type: 'GET_USER'\n})","import React from \"react\";\nimport logo from './logo.svg';\nimport './styles.css';\n\n/**\n * \n * Layout is the main layout of the application. Each route follows this\n * layout.\n * \n * @param Children\n * \n */\nconst Layout = ({ children }) => \n    <div className=\"App\">\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            {children}\n        </header>\n    </div>;\n\nexport default Layout","import React from \"react\";\nimport { connect } from 'react-redux';\nimport './styles.css';\n\n/**\n * \n * User card is a little card that displays github user info\n * \n * @param {text} avatar_url url to users github avatar\n * @param {text} name users name\n * @param {text} login users login\n */\nconst UserCard = ({ login, avatar_url, name, ...props }) => {\n    return <div class=\"user-card\">\n        <img src={avatar_url} alt=\"GitHub Avatar\" />\n        <div class=\"user-card-body\">\n            <p class=\"name\">{name}</p>\n            <p class=\"login\">{login}</p>\n        </div>\n    </div>;\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        ...props,\n        login: state.oauth.login,\n        name: state.oauth.name,\n        avatar_url: state.oauth.avatar_url,\n    };\n}\n\nexport default connect(mapStateToProps)(UserCard);\n","import React, { Component } from 'react';\nimport UserCard from '../UserCard';\n\n/**\n * \n * Home is simply the Home page. Has a user card and some text. \n * \n */\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <UserCard />\n        <p>Welcome to the home page. You are successfully logged in!</p>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React  from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Authorization from './components/Authorization';\nimport { Login, Success, Error } from './components/OAuth';\nimport Layout from './components/Layout';\nimport Home from './components/Home';\n\nconst routes = (\n    <Layout>\n        <Route exact path=\"/\" component={(props) =>\n            <Authorization\n                Component={Home} {...props} />\n        } />\n        <Route exact path=\"/OAuth\"\n          component={Login}\n        />\n        <Route exact path=\"/OAuth/Error\"\n          component={Error}\n        />\n        <Route exact path=\"/OAuth/Success\"\n          component={Success}\n        />\n        <Route component={() =>\n          <p>404: Route Unknown</p>\n        }/>\n    </Layout>\n);\n\nexport default routes","const oauth = (state = {}, action) => {\n\n    switch (action.type) {\n        case 'STORE_ACCESS_TOKEN':\n            return {\n                access_token: action.access_token,\n                ...state\n            }\n        case 'GET_USER_RECEIVED':\n            // save only the important bits!\n            return {\n                login: action.data.login,\n                avatar_url: action.data.avatar_url,\n                name: action.data.name,\n                ...state\n            }\n        default:\n            return state;\n    }\n}\nexport default oauth;","// This reducer can be used for a loading widget whenever making API calls\nconst loading = (state = false, action) => {\n\n    switch (action.type) {\n        case 'GET_USER':\n            return true\n        case 'GET_USER_RECEIVED':\n            return false\n        case 'GET_USER_ERROR':\n            return false\n        default:\n            return state\n    }\n}\n\nexport default loading","import { combineReducers } from 'redux';\nimport oauth from './oauth';\nimport loading from './loading';\n\nconst rootReducer = combineReducers({\n    loading,\n    oauth\n});\n\nexport default rootReducer;","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from \"redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport dataService from './services';\nimport routes from './routes';\nimport './index.css';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, {}, applyMiddleware(dataService));\n\nrender(\n  <Provider store={store}>\n    {store.getState().loading ? <p>loading...</p>\n      : <HashRouter children={routes} />  \n    }\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}